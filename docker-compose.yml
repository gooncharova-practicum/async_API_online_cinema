version: '3'
services:
  redis:
    image: redis/redis-stack
    container_name: redis
    env_file:
      - .env
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://${REDIS_HOST}:${REDIS_PORT}"
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - cache:/data
    networks:
      - api_network
    expose:
      - "${REDIS_PORT}"
    restart: on-failure

  elasticsearch:
    image: elasticsearch:7.9.1
    container_name: elasticsearch
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - "http.host=0.0.0.0"
      - "transport.host=127.0.0.1"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://${ELASTIC_HOST}:${ELASTIC_PORT}"
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - api_network
    expose:
      - "${ELASTIC_PORT}"
    ports:
      - "${ELASTIC_PORT}:${ELASTIC_PORT}"
    restart: on-failure
  #kibana:
    #image: kibana:7.7.0
    #ports:
    #- 5601:5601

  postgres:
    image: postgres:13.3-alpine
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - api_network
    expose:
      - "${DB_PORT}"
    restart: on-failure

  etl:
    build: ./etl/src
    container_name: etl
    env_file:
      - .env
    depends_on:
      - elasticsearch
      - postgres
    volumes:
      - etl_logs:/usr/src/app/logs/
    networks:
      - api_network
    entrypoint: [ "bash", "./entrypoint.sh" ]
    restart: on-failure

  backend:
    build: ./app
    container_name: backend
    env_file:
      - .env
    depends_on:
      - redis
      - elasticsearch
    entrypoint: [ "bash", "./entrypoint.sh" ]
    restart: on-failure

  nginx:
    image: nginx:1.23.1
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${BACKEND_PORT}:80"
    depends_on:
      backend:
        condition: service_started
    restart: always

  tests:
    build: ./tests/functional
    container_name: tests
    env_file:
      - .env
    extends:
      service: backend
    depends_on:
      - backend
    volumes:
    - ./tests:/opt/app/tests
    entrypoint: [ "pytest", "."]
    restart: 'no'

networks:
  api_network:
    driver: bridge

volumes:
  cache:
  es_data:
  postgres_data:
  etl_logs:
  tests:
